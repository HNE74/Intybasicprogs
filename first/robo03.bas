INCLUDE "CONSTANTS.BAS"

REM MODE 0,0,0,0,0
MODE 1 

DIM ENEMY_X(6)
DIM ENEMY_Y(6)
DIM ENEMY_ACTIVE(6)
DIM ENEMYCOUNTER
DIM ENEMY_MOVE_X(6)
DIM ENEMY_MOVE_Y(6)
DIM ENEMY_MOVES(6)

DIM EXPLOSION_COUNTER
DIM EXPLOSION_X(6)
DIM EXPLOSION_Y(6)
DIM EXPLOSION_FRAME(6)


DIM MAX_ENEMY
DIM SHOT_X
DIM SHOT_Y
DIM #ORIGINAL_SHOT_X
DIM #ORIGINAL_SHOT_Y

DIM SHOT_ACTIVE

DIM X
DIM Y
DIM #ORIGINAL_X
DIM #ORIGINAL_Y
DIM NEW_LEVEL: REM TEMPORARY INVULNERABILITY AFTER DEATH OR START OF NEW LEVEL


DIM #TIMER




TITLE:
MODE 0,$0009,0,0,0

WAIT
	#BACKTAB(22) = 210 * 8 + 7
	#BACKTAB(24) = 210 * 8 + 6
	#BACKTAB(26) = 210 * 8 + 5
	#BACKTAB(28) = 210 * 8 + 4

	#BACKTAB(31) = 210 * 8 + 3
	#BACKTAB(33) = 210 * 8 + 2
	#BACKTAB(35) = 210 * 8 + 1
	#BACKTAB(37) = 210 * 8 + 0

	PRINT AT 61,"Waffle Electronics"
	PRINT AT 86,"presents"

	PRINT AT 125,"ROBOBLAST"
	PRINT AT 162," SINGLE CONTROL "

	PRINT AT 201,"Copr @ 1980 Waffle"
	WHILE CONT1.B0: WEND

TITLE_LOOP:
	WAIT
	IF CONT1.KEY = 1 THEN CONTROL_STYLE = 0: MODE 0,$0009,0,0,0: WAIT: PRINT AT 162," SINGLE CONTROL ": INVERT = 0
	IF CONT1.KEY = 2 THEN CONTROL_STYLE = 1: MODE 0,$000A,0,0,0: WAIT: PRINT AT 162,"  DUAL CONTROL  ": INVERT = 0
	IF CONT1.KEY = 3 THEN CONTROL_STYLE = 1: MODE 0,$000C,0,0,0: WAIT: PRINT AT 162,"  INVERT DUAL   ": INVERT = 1

	IF CONT2 AND &00011111 THEN GOTO INIT_NEW_GAME
	IF CONT1.B0 THEN GOTO INIT_NEW_GAME

GOTO TITLE_LOOP





INIT_NEW_GAME:
CLS
MODE 1
WAIT

DEFINE 0,4,MAIN_BITMAPS
WAIT
DEFINE 10,8,EXPLOSION
WAIT

LEVEL = 1
#SCORE = 0
LIVES = 2
MULTIPLIER = 1
TOTAL_ENEMIES=4

FOR I = 0 TO 5
	ENEMY_ACTIVE(I) = 0
NEXT
rem LEVEL = 15


BUILD_PLAYFIELD:
	MAX_ENEMY = (LEVEL*3) + 5
	MAX_GOLD = (LEVEL) + 8

	FOR I = 0 TO MAX_ENEMY
		I2 = RANDOM(220)+20
		
		WHILE #BACKTAB(I2) <> 0
			I2 = RANDOM(220)+20
		WEND
		#BACKTAB(I2) = BG01 + FG_GREEN
	NEXT

	FOR I = 1 TO MAX_GOLD
		I2 = RANDOM(220)+20
		WHILE #BACKTAB(I2) <> 0
			I2 = RANDOM(220)+20
		WEND
		#BACKTAB(I2) = "$" * 8 + FG_YELLOW 
	NEXT

	X = 80: Y = 40
	#ORIGINAL_X = X * 4
	#ORIGINAL_Y = Y * 4
	IF #BACKTAB((X/8)+((Y/8)*20)) <> 0 THEN #BACKTAB((X/8)+((Y/8)*20)) = 0: MAX_ENEMY = MAX_ENEMY - 1
	MAX_ENEMY = MAX_ENEMY + 1
	NEW_LEVEL = 165
	SHOOT_DIRECTION = 1
	SHOOT_DIRECTION2 = 1
	GOSUB DRAW_SCORE2
START:
	WAIT:REM WAIT: WAIT 

	REM SOUND EFFECTS
	SOUND 2, SOUND_EFFECTS(#SND_TYPE + SND_FRAME), SND_ON * 13: SND_FRAME = SND_FRAME + 1: IF SND_FRAME > 29 THEN SND_ON = 0: GOSUB CLEAR_SOUND


	#OX = X+VISIBLE+HIT
	IF NEW_LEVEL <> 0 THEN 
		IF NEW_LEVEL%2 = 0 THEN #OX=X ELSE #OX = X + VISIBLE
		NEW_LEVEL = NEW_LEVEL + 1
	END IF

	SPRITE 0,#OX,Y+ZOOMY2,SPR00 + SPR_WHITE

	CONTROLLER_FILTER = CONT1 AND &00011111

	IF INVERT = 0 THEN
		#ORIGINAL_X = #ORIGINAL_X + CONTROL_X(CONTROLLER_FILTER)
		#ORIGINAL_Y = #ORIGINAL_Y + CONTROL_Y(CONTROLLER_FILTER)
	ELSE
		#ORIGINAL_X = #ORIGINAL_X + INVERT_CONTROL_X(CONTROLLER_FILTER)
		#ORIGINAL_Y = #ORIGINAL_Y + INVERT_CONTROL_Y(CONTROLLER_FILTER)
	END IF

	X = #ORIGINAL_X / 4
	Y = #ORIGINAL_Y / 4

	IF X<=8 THEN X = 8: #ORIGINAL_X = X * 4
	IF Y<=16 THEN Y = 16: #ORIGINAL_Y = Y * 4
	IF X>=160 THEN X = 160: #ORIGINAL_X = X * 4
	IF Y>=96 THEN Y = 96: #ORIGINAL_Y = Y * 4

rem	TEMP = 0
rem	I2 = ENEMY_VELOCITY(I) % 4
rem	IF I2 = 1 THEN 
rem		TEMP = FRAMESKIP3
rem	ELSEIF I2 = 2 THEN 
rem		TEMP = FRAMESKIP
rem	ELSEIF I2 = 3 THEN 
rem		TEMP = FRAMESKIP + FRAMESKIP3
rem	END IF

	SHOOT_FLAG = 0
	IF CONTROL_STYLE = 0 THEN
		IF CONT1.B0 THEN SHOOT_FLAG = 2
		IF CONT1.B1 THEN SHOOT_FLAG = 1
		TEMP = CONT1 AND &00011111
		IF TEMP THEN IF SHOOT_FLAG <> 1 THEN SHOOT_DIRECTION2 = TEMP
	ELSE
		IF SHOT_ACTIVE = 0 THEN
			SHOOT_DIRECTION2 = CONT2 AND &00011111
			IF SHOOT_DIRECTION2 THEN SHOOT_FLAG = 1

		END IF
	END IF

	PLAYER_COLLISION = ((Y-4)/8)*20+((X-4)/8)
	
	IF #BACKTAB(PLAYER_COLLISION) = "$"*8+FG_YELLOW THEN #BACKTAB(PLAYER_COLLISION) = 0: #SCORE = #SCORE + MULTIPLIER * 10:#SND_TYPE = 30:SND_FRAME = 0:SND_ON = 1

	IF NEW_LEVEL = 0 THEN IF #BACKTAB(PLAYER_COLLISION) = BG01 + FG_GREEN THEN GOTO LOSE_LIFE
	I = COL0
	IF I > 2 THEN GOTO LOSE_LIFE

	IF SHOT_ACTIVE = 0 THEN
		SPRITE 1,0
		SHOOT_DIRECTION = SHOOT_DIRECTION2
		IF SHOOT_FLAG <> 0 THEN 
			SHOT_ACTIVE = 1
			SND_ON = 1: #SND_TYPE = 0: SND_FRAME = 0
			SHOT_X = X: SHOT_Y = Y
			#ORIGINAL_SHOT_X = X * 2
			#ORIGINAL_SHOT_Y = Y * 2
		END IF
	ELSE
		SPRITE 1,SHOT_X+VISIBLE+HIT, SHOT_Y+ZOOMY2,SPR02+SPR_YELLOW

		REM SHOOT BACKTAB
		TEMP = ((SHOT_X-4)/8) + (((SHOT_Y-4)/8)*20)
		IF #BACKTAB(TEMP) = BG01+FG_GREEN THEN #BACKTAB(TEMP) = 0: EXPLOSION_X(EXPLOSION_COUNTER) = TEMP: EXPLOSION_FRAME(EXPLOSION_COUNTER) = 1: GOSUB KILL_ENEMY

		REM SHOOT SPRITE
		I = COL1
		IF I >= 4 THEN
			I = COLLISION_DATA(I/4)
			IF ENEMY_ACTIVE(I) > 0 THEN ENEMY_ACTIVE(I) = 0: SPRITE I+2,0: GOSUB KILL_ENEMY
		END IF
		IF INVERT = 0 THEN
			#ORIGINAL_SHOT_X = #ORIGINAL_SHOT_X + CONTROL_X(SHOOT_DIRECTION)
			#ORIGINAL_SHOT_Y = #ORIGINAL_SHOT_Y + CONTROL_Y(SHOOT_DIRECTION)
		ELSE
			#ORIGINAL_SHOT_X = #ORIGINAL_SHOT_X + INVERT_CONTROL_X(SHOOT_DIRECTION)
			#ORIGINAL_SHOT_Y = #ORIGINAL_SHOT_Y + INVERT_CONTROL_Y(SHOOT_DIRECTION)
		END IF
		IF #ORIGINAL_SHOT_X < 10 THEN SHOT_ACTIVE = 0
		IF #ORIGINAL_SHOT_Y < 10 THEN SHOT_ACTIVE = 0
		IF #ORIGINAL_SHOT_Y > 104*2 THEN SHOT_ACTIVE = 0
		IF #ORIGINAL_SHOT_X > 170*2 THEN SHOT_ACTIVE = 0

		SHOT_X = #ORIGINAL_SHOT_X / 2
		SHOT_Y = #ORIGINAL_SHOT_Y / 2


	END IF

REM **************
REM * EXPLOSIONS *
REM **************
	FOR I = 0 TO 3
		IF EXPLOSION_FRAME(I) > 0 THEN
			IF EXPLOSION_FRAME(I) > 7 THEN 
				EXPLOSION_FRAME(I) = 255
				#BACKTAB(EXPLOSION_X(I)) = 0
			ELSE
				#BACKTAB(EXPLOSION_X(I)) = (EXPLOSION_FRAME(I) * 8) + BG09 + FG_YELLOW
			END IF
			IF FRAMESKIP THEN EXPLOSION_FRAME(I) = EXPLOSION_FRAME(I) + 1
		END IF
	NEXT


REM ***************
REM * ENEMY LOGIC *
REM ***************
	FOR I = 0 TO 3

	I2 = RANDOM(220) + 20
	IF #BACKTAB(I2) = BG01 + FG_GREEN THEN
		IF ENEMY_ACTIVE(ENEMYCOUNTER) = 0 THEN
			ENEMY_X(ENEMYCOUNTER) = ((I2 % 20) * 8) + 8
			ENEMY_Y(ENEMYCOUNTER) = ((I2 / 20) * 8) + 8
			ENEMY_MOVES(ENEMYCOUNTER) = 0
			ENEMY_ACTIVE(ENEMYCOUNTER) = 1
	
			ENEMY_MOVE_X(ENEMYCOUNTER) = 0
			ENEMY_MOVE_Y(ENEMYCOUNTER) = 0
			IF ENEMY_X(ENEMYCOUNTER) < X - 4 THEN
				ENEMY_MOVE_X(ENEMYCOUNTER) = 1
			ELSEIF ENEMY_X(ENEMYCOUNTER) > X + 2 THEN 
				ENEMY_MOVE_X(ENEMYCOUNTER) = -1
			END IF
			IF ENEMY_Y(ENEMYCOUNTER) < Y - 4 THEN
				ENEMY_MOVE_Y(ENEMYCOUNTER) = 1
			ELSEIF ENEMY_Y(ENEMYCOUNTER) > Y + 2 THEN
				ENEMY_MOVE_Y(ENEMYCOUNTER) = -1
			END IF

			TEMP = I2 + (ENEMY_MOVE_Y(ENEMYCOUNTER) * 20) + ENEMY_MOVE_X(ENEMYCOUNTER)
			IF #BACKTAB(TEMP) = 0 THEN
				#BACKTAB(I2) = 0

				#BACKTAB(TEMP) = BG02: REM MARK TO PREVENT OTHER ROBOT MOVING TO SAME SPOT
			ELSE
				ENEMY_ACTIVE(ENEMYCOUNTER) = 0
			END IF
			ENEMYCOUNTER = ENEMYCOUNTER + 1:IF ENEMYCOUNTER > 4 THEN ENEMYCOUNTER = 0
		END IF

			
	END IF
	NEXT

REM	COUNT_ENEMY = 0
REM	FOR I = 0 TO 4
REM		IF ENEMY_ACTIVE(I) > 0 THEN COUNT_ENEMY = COUNT_ENEMY + 1
REM	NEXT
REM	FOR I = 0 TO 220
REM		IF #BACKTAB(I+20) = BG01+FG_GREEN THEN COUNT_ENEMY = COUNT_ENEMY + 1
REM	NEXT
REM	PRINT AT 5,<2>COUNT_ENEMY


REM DRAW AND MOVE ENEMIES
	FOR I = 0 TO TOTAL_ENEMIES
		ON ENEMY_ACTIVE(I) GOSUB ,ENEMY_TYPE1, ENEMY_TYPE2
		ENEMY_MOVES(I) = ENEMY_MOVES(I) + 1
	NEXT

	IF MAX_ENEMY = 0 THEN GOTO LEVEL_COMPLETE

	FRAMESKIP = 1 - FRAMESKIP: IF FRAMESKIP = 1 THEN FRAMESKIP4 = 2 - FRAMESKIP4
	FRAMESKIP3 = 0: IF FRAMESKIP + FRAMESKIP4 = 0 THEN FRAMESKIP3 = 1: GOSUB DRAW_SCORE
	FRAMESKIP2 = FRAMESKIP2 + 1

	IF FRAMESKIP2 > 59 THEN FRAMESKIP2 = 0: #TIMER = #TIMER + 1

GOTO START




ENEMY_TYPE1: PROCEDURE
	SPRITE I+2,ENEMY_X(I)+HIT+VISIBLE,ENEMY_Y(I)+ZOOMY2,SPR01+SPR_GREEN
REM	IF FRAMESKIP3 = 1 THEN
REM	END IF

	IF ENEMY_MOVES(I) > 7 THEN 
		IF MAX_ENEMY > 4 THEN
REM			SPRITE I + 2 , 0
REM			ENEMY_ACTIVE(I) = 0
			TEMP = (((ENEMY_X(I)-4)/8)) + (((ENEMY_Y(I)-4)/8)*20)
			IF #BACKTAB(TEMP) = BG02 THEN 
				#BACKTAB(TEMP) = BG01 + FG_GREEN: ENEMY_ACTIVE(I) = 0: SPRITE I+2,0
			ELSE
REM				#BACKTAB(TEMP) = "!"*8+7: REM DEBUG CODE FOR WHEN ENEMIES CAN'T MOVE INTO THE CORRECT SPOT (STILL OCCURRING)
			END IF 
		ELSE
			ENEMY_ACTIVE(I) = 2
		END IF
	END IF
	ENEMY_X(I) = ENEMY_X(I) + ENEMY_MOVE_X(I)
	ENEMY_Y(I) = ENEMY_Y(I) + ENEMY_MOVE_Y(I)
RETURN
END

ENEMY_TYPE2: PROCEDURE
	SPRITE I+2,ENEMY_X(I)+HIT+VISIBLE,ENEMY_Y(I)+ZOOMY2,SPR01+SPR_RED
	ENEMY_X(I) = ENEMY_X(I) + ENEMY_MOVE_X(I): REM *FRAMESKIP
	ENEMY_Y(I) = ENEMY_Y(I) + ENEMY_MOVE_Y(I): REM*FRAMESKIP
	IF ENEMY_MOVES(I) > 7 THEN 
		ENEMY_MOVE_X(I) = 0
		ENEMY_MOVE_Y(I) = 0
		IF ENEMY_X(I) < X - 4 THEN
			ENEMY_MOVE_X(I) = 1
		ELSEIF ENEMY_X(I) > X + 2 THEN 
			ENEMY_MOVE_X(I) = -1
		END IF
		IF ENEMY_Y(I) < Y - 4 THEN
			ENEMY_MOVE_Y(I) = 1
		ELSEIF ENEMY_Y(I) > Y + 2 THEN
			ENEMY_MOVE_Y(I) = -1
		END IF
		ENEMY_MOVES(I) = 0
	END IF
RETURN
END

CLEAR_SPRITES: PROCEDURE
	FOR I = 0 TO 7
		SPRITE I,0
	NEXT

RETURN
END


COLLISION_DATA:
DATA 0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5
DATA 5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5


DRAW_SCORE: PROCEDURE
	PRINT AT 0,<3>MAX_ENEMY: PRINT AT 15,<5>#SCORE
RETURN
END
DRAW_SCORE2: PROCEDURE
	PRINT AT 4,"BOTS"
	PRINT AT 12,"SC:"
RETURN
END

LOSE_LIFE:
	GOSUB CLEAR_SOUND
	GOSUB CLEAR_SPRITES
	GOSUB CLEAR_EXPLOSIONS

	SOUND 1, 1, 0
	SOUND 2, 1, 0
	SOUND 4, 31, $31
	SOUND 0, 2000, PSG_ENVELOPE_ENABLE
	SOUND 3, 32000, $08: REM PSG_ENVELOPE_CYCLE_RAMP_DOWN_SAWï»¿TOOTH

	FOR I = 0 TO TOTAL_ENEMIES
		ENEMY_X(I) = X-4: ENEMY_Y(I) = Y+4
		IF ENEMY_ACTIVE(I)<>0 THEN MAX_ENEMY = MAX_ENEMY - 1
		ENEMY_ACTIVE(I) = 1
	NEXT
	ENEMY_MOVE_X(0) = -1: ENEMY_MOVE_Y(0) = 0
	ENEMY_MOVE_X(1) = 1: ENEMY_MOVE_Y(1) = 0
	ENEMY_MOVE_X(2) = 0: ENEMY_MOVE_Y(2) = -1
	ENEMY_MOVE_X(3) = 0: ENEMY_MOVE_Y(3) = 1

	REM MAKE EXPLOSION HERE
	I2 = 0
LOSE_LIFE2:
	WAIT
	FOR I = 0 TO 3
		IF ENEMY_ACTIVE(I) = 1 THEN
			SPRITE I,ENEMY_X(I)+ZOOMX2+VISIBLE, ENEMY_Y(I)+ZOOMY4-8,SPR00+RANDOM(7)+1
			ENEMY_X(I) = ENEMY_X(I) + ENEMY_MOVE_X(I)
			ENEMY_Y(I) = ENEMY_Y(I) + ENEMY_MOVE_Y(I)
			IF ENEMY_X(I) > 170 THEN ENEMY_ACTIVE(I) = 0
			IF ENEMY_Y(I) > 104 THEN ENEMY_ACTIVE(I) = 0

		ELSE
			SPRITE I,0
		END IF

	NEXT
	I2 = I2 + 1
	IF I2 < 140 THEN GOTO LOSE_LIFE2
	
	GOSUB CLEAR_ENEMIES
	IF LIVES <> 0 THEN LIVES = LIVES - 1 ELSE GOTO GAME_OVER
	NEW_LEVEL = 165
	GOSUB CLEAR_SOUND
GOTO START

WAIT_ONE_SECOND: PROCEDURE
	FOR I = 0 TO I2
		WAIT
	NEXT
RETURN
END

LEVEL_COMPLETE:
	GOSUB CLEAR_EXPLOSIONS
	GOSUB CLEAR_SPRITES
	GOSUB CLEAR_ENEMIES
	CLS
	LEVEL = LEVEL + 1

	PRINT AT 45 COLOR 1,"ALL ROBOTS"
	PRINT AT 65,"DESTROYED!"


	PRINT AT 165 COLOR 7,"GET READY"
	PRINT AT 184,"FOR WAVE ",<2>LEVEL,"!"
	IF LEVEL % 4 = 0 THEN MULTIPLIER = MULTIPLIER + 1

	#SCORE = #SCORE + MULTIPLIER * 100

	FOR I = 0 TO 180
		WAIT
		PRINT AT 103 COLOR RANDOM(7),"BONUS AWARDED"
		PRINT AT 125,<1>MULTIPLIER,"00 POINTS"
	NEXT
	CLS
	PRINT COLOR 7

GOTO BUILD_PLAYFIELD

CLEAR_EXPLOSIONS: PROCEDURE
	SHOT_ACTIVE = 0
	FOR I = 0 TO 6
		EXPLOSION_FRAME(I) = 0
		IF EXPLOSION_X(I) > 0 THEN #BACKTAB(EXPLOSION_X(I)) = 0
	NEXT
RETURN
END

KILL_ENEMY: PROCEDURE
	
	MAX_ENEMY = MAX_ENEMY - 1
	SHOT_ACTIVE = 0
	EXPLOSION_COUNTER = EXPLOSION_COUNTER + 1: IF EXPLOSION_COUNTER > 3 THEN EXPLOSION_COUNTER = 0
	#SCORE = #SCORE + MULTIPLIER
	SOUND 1, 1, 0
	SOUND 2, 1, 0
	SOUND 4, 21 + RAND(10), $31
	SOUND 0, 4000, PSG_ENVELOPE_ENABLE
	SOUND 3, 22000, $08: REM PSG_ENVELOPE_CYCLE_RAMP_DOWN_SAWï»¿TOOTH
RETURN
END

CLEAR_SOUND: PROCEDURE
	SND_FRAME = 0: SND_ON = 0
	SOUND 0,,0
	SOUND 2,,0
	SOUND 1,,0
	SOUND 4,1,$38
RETURN
END

CLEAR_ENEMIES: PROCEDURE
	FOR I = 0 TO TOTAL_ENEMIES
		ENEMY_ACTIVE(I) = 0
	NEXT
RETURN
END

GAME_OVER:
	GOSUB CLEAR_SOUND
	PRINT AT 105,"GAME OVER"
	PRINT AT 144,"SCORE: ",<5>#SCORE
GAME_OVER2:
	WAIT
	I = CONT2 AND &00011111 
	IF I = 0 AND CONT1.B0 = 0 THEN GOTO GAME_OVER3
	GOTO GAME_OVER2
GAME_OVER3:
	WAIT
	I = CONT2 AND &00011111 
	IF CONT1.B0 OR I THEN CLS: GOTO INIT_NEW_GAME
	GOTO GAME_OVER3

MAIN_BITMAPS:
BITMAP "........"
BITMAP "........"
BITMAP "..###..."
BITMAP ".#...#.."
BITMAP ".#...#.."
BITMAP "..###..."
BITMAP "........"
BITMAP "........"

ENEMY_BITMAPS:
BITMAP "........"
BITMAP "...#...."
BITMAP "..###..."
BITMAP ".#.#.#.."
BITMAP "#######."
BITMAP ".#.#.#.."
BITMAP "..###..."
BITMAP "...#...."

SHOT_BITMAPS:
BITMAP "........"
BITMAP "...#...."
BITMAP "..###..."
BITMAP ".#####.."
BITMAP "..###..."
BITMAP "...#...."
BITMAP "........"
BITMAP "........"

BLANK_SPOT:
BITMAP "........"
BITMAP "........"
BITMAP ".....##."
BITMAP "........"
BITMAP "........"
BITMAP "........"
BITMAP "........"
BITMAP "........"

BITMAP "........"
BITMAP "........"
BITMAP "..###..."
BITMAP ".#...#.."
BITMAP ".#...#.."
BITMAP "..###..."
BITMAP "........"
BITMAP "........"

EXPLOSION:
	DATA $0000,$0822,$081C,$0022
	DATA $0000,$1E21,$1212,$211E
	DATA $0000,$0C21,$1216,$210C
	DATA $0000,$122D,$2521,$2D12
	DATA $0000,$002D,$2529,$2D00
	DATA $1400,$5100,$4500,$1400
	DATA $0800,$1000,$0441,$0800
	DATA $0000,$0020,$0000,$0002



SOUND_EFFECTS:
	REM HIT ENEMY - OFFSET 0
	DATA 1000, 900, 800, 600, 400, 200, 100, 050, 000, 000
	DATA 0000, 000, 000, 000, 000, 000, 000, 000, 000, 000
	DATA 0000, 000, 000, 000, 000, 000, 000, 000, 000, 000

	REM MONEY BAG - OFFSET 30
	DATA 60, 55, 50, 45, 40, 35, 30, 80, 79, 78
	DATA 60, 55, 50, 45, 40, 35, 30, 80, 79, 78
	DATA 60, 55, 50, 45, 40, 35, 30, 80, 79, 78


CONTROL_X:
DATA 00, 00, 08, 04, 00, 00, 07, 00, -8, -7, 08, 00, -4, 00, 00, 00, 00, -4, 07, 06, 04, 00, 06, 08, -7, -6, 00, 00, -6
CONTROL_Y:
DATA 00, 08, 00, 07, -8, -8, -4, 00, 00, 04, 00, 00, -7, 00, 00, 00, 00, 07, 04, 06, -7, 00, -6, 00, -4, 06, 00, 08, -6


INVERT_CONTROL_X:
DATA 00, 00, -8, -4, 00, 00, -7, 00, 08, 07, -8, 00, 04, 00, 00, 00, 00, 04, -7, -6, -4, 00, -6, -8, 07, 06, 00, 00, 06
INVERT_CONTROL_Y:
DATA 00, -8, 00, -7, 08, 08, 04, 00, 00, -4, 00, 00, 07, 00, 00, 00, 00, -7, -4, -6, 07, 00, 06, 00, 04, -6, 00, -8, 06
