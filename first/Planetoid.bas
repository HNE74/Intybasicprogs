REM *************************************************************************
REM IntyBASIC Project: SHIP
REM *************************************************************************
REM     Programmer: Greg Thompson
REM     Created:    01/10/2016
REM     Updated:    01/07/2018
REM
REM     Project automatically generated by INTYNEW.
REM *************************************************************************
REM History:
REM 01/10/2016 - SHIP project created.
REM *************************************************************************

REM Include useful predefined constants
INCLUDE "constants.bas"
REM coordinate X (0-168)   
CONST #MAX_PLAYER_X = 163	' 4 pixels of avatar are off right side of screen.
CONST #MIN_PLAYER_X = 4		' 4 pixels of avatar are off left side of screen.
REM coordinate Y (0-95)
CONST #MAX_PLAYER_Y = 91	' 4 pixels of avatar are off right side of screen.
CONST #MIN_PLAYER_Y = 4		' 4 pixels of avatar are off left side of screen.
hi_score = 0
VECTOR = 0 '0 = VECTORS, 1=FILLED
COLORS = 0 '0 = WHITE, 1 = MULTI COLOR
RESTART:
MODE SCREEN_CS,STACK_BLACK,STACK_Green,STACK_RED,STACK_WHITE

WAIT
CLS
WAIT

DEFINE DEF00,13,SHIP_IMAGE
'DEFINE DEF10,1,MISSILE_IMAGE

Rem Setup arrays for holding 8 sprites x,y locations and color
Dim #Spritex(8)
Dim #spritey(8)
DIM SPRITEC(8)
DIM LIVES(2)
Dim #XMOVE(8)
Dim #YMOVE(8)
DIM SHOW(8)
DIM ZOOMXA(8)
DIM ZOOMYA(8)
DIM FLIPXA(8)
DIM FLIPYA(8)
DIM ROCK#(8)
#Spritex(0)=#MIN_PLAYER_X+75
#spritey(0)=50
SPRITEC(0)= 1
SPRITEC(7)= 7
#SPRITEFRAME=0
#FLIPX=$0000
#FLIPY=$0000
#FLIPIT=0
GAME_OVER = 0
Y=3
DIRECTION=0
#SPRITEFRAME=0
#FLAME=0
#ROCK#=0
#MISSILEX=0
#MISSILEY=0
#MISSILEFRAME=0
signed a,b,c
ROCK_AVAIL = 1
LEVEL = 2
HITS = 0
GAME_ON = 0
TIMER = 90
SHOW_ROCKS = 0

ON FRAME GOSUB COUNT_DOWN
GOSUB TITLE_SCREEN
FOR A = 1 TO 6
	SHOW(A) = 0
NEXT
IF SHOW_ROCKS = 0 THEN
	GOSUB RANDOM_ROCKS
	SHOW_ROCKS = 1
END IF
	PRINT AT SCREENPOS(10,0) COLOR CS_RED,<2>TIMER," "
	PRINT AT SCREENPOS(17,0) COLOR CS_BLUE,<>HITS," "

	COUNT_FRAME = 0			
	DO
		IF SHOW_ROCKS = 0 THEN
			LEVEL = LEVEL + 1
			GOSUB RANDOM_ROCKS
			SHOW_ROCKS = 1
		END IF
	GOSUB MOVE_SHIP
	IF GAME_ON = 1 AND TIMER > 0 THEN	
		IF COUNT_FRAME > 60 THEN
			TIMER = TIMER - 1
			COUNT_FRAME = 0
				IF TIMER > 10 THEN
					PRINT AT SCREENPOS(10,0) COLOR CS_RED,<2>TIMER," "
				ELSE
					IF YELLOW = 0 THEN
						PRINT AT SCREENPOS(10,0) COLOR CS_YELLOW,<2>TIMER," "
						YELLOW = 1
					ELSE
						PRINT AT SCREENPOS(10,0) COLOR CS_WHITE,<2>TIMER," "
						YELLOW = 0
					END IF
				END IF
		END IF
		
		IF TIMER = 0 THEN 
			GOTO FINISH_IT
		END IF
	END IF

	SPRITE 0,#SPRITEX(0)+VISIBLE+HIT, #SPRITEY(0)+#FLIPX+#FLIPY, SPR00+ (8*#SPRITEFRAME) + #FLAME + SCOLOR(SPRITEC(7))
	IF MISSILE > 0 THEN
		SPRITE 7,#SPRITEX(7)+VISIBLE+HIT,#SPRITEY(7),SPR12 + (8*#MISSILEFRAME) + SCOLOR(SPRITEC(7))
	END IF
	IF DIRECTION < 3 OR DIRECTION > 5 THEN
		#FLIPY=$0000
	ELSE
		#FLIPY = FLIPY
	END IF
	IF DIRECTION < 5 THEN
		#FLIPX=$0000
	ELSE
		#FLIPX=FLIPX
	END IF
	
	IF DIRECTION = 0 OR DIRECTION =4 THEN
		#SPRITEFRAME = 0
	ELSEIF DIRECTION = 2 OR DIRECTION = 6 THEN
		#SPRITEFRAME = 2
	ELSE
		#SPRITEFRAME = 1
	END IF
	        	
	
	IF CONT=DISC_E OR CONT=DISC_NNE OR CONT=DISC_NE OR CONT=DISC_ENE THEN
		DIRECTION=DIRECTION + 1
		IF DIRECTION > 7 THEN DIRECTION = 0
		
	ELSEIF CONT = DISC_W OR CONT=DISC_NNW OR CONT=DISC_NW OR CONT=DISC_WNW THEN
	
		IF DIRECTION = 0 THEN 
		   DIRECTION = 7
		ELSE
			DIRECTION=DIRECTION - 1
		END IF
	END IF	
	

	REM UP IS THE ROCKET THRUST
	GOSUB THRUSTER
		
	'GOSUB WAITABIT	
	IF SHOW_ROCKS = 1 THEN
		GOSUB WAITABIT
		FOR A=1 TO 6
			IF (SHOW(A)=1) THEN
				GOSUB MOVE_ROCK
			END IF
		NEXT
			
		FOR A = 1 TO 6
			IF SHOW(A)=1 THEN 
				#FLIPIT = 0
				IF FLIPXA(A) = 1 THEN #FLIPIT = FLIPX
				IF FLIPYA(A) = 1 THEN #FLIPIT = #FLIPIT+FLIPY
				#ROCK#=8*ROCK#(A)
				IF VECTOR = 0 THEN
				   SPRITE A,#SPRITEX(A)+VISIBLE+HIT+ZOOMX(ZOOMXA(A)), #SPRITEY(A)+#FLIPIT+ZOOMY(ZOOMYA(A)), SPR06+ #ROCK#+ SCOLOR(SPRITEC(A))
				ELSE
				   SPRITE A,#SPRITEX(A)+VISIBLE+HIT+ZOOMX(ZOOMXA(A)), #SPRITEY(A)+#FLIPIT+ZOOMY(ZOOMYA(A)), SPR09+ #ROCK#+ SCOLOR(SPRITEC(A))
				END IF
				'	END IF
				'END IF
			END IF
		NEXT
	ELSE
		GOSUB WAITABIT
	END IF
	   	
LOOP UNTIL GAME_OVER = 1
FINISH_IT:
IF HITS > HI_SCORE THEN HI_SCORE = HITS
Y=100
	PRINT AT SCREENPOS(5,0) COLOR CS_BLUE, "PLANETOID     "
	PRINT AT SCREENPOS(5,5) COLOR CS_RED,"GAME OVER"
	PRINT AT SCREENPOS(3,11) COLOR CS_BLUE,"HIGH SCORE:",<>HI_SCORE,"  "
		FOR A = 0 TO 7
			RESETSPRITE(A)
		NEXT
GAME_OVER_LOOP:
	
	IF SHOW_PRESS = 1 THEN
	   IF (CONT.BUTTON OR CONT.UP OR CONT.DOWN OR CONT.LEFT OR CONT.RIGHT) THEN 
			SHOW_PRESS = 0
			RESETSPRITE(0)			
		    GOTO RESTART
	   END IF
	END IF
	GOSUB WAITABIT
	Y=3
	SHOW_PRESS = 1
		PRINT AT SCREENPOS(0,8) COLOR CS_WHITE,"  PRESS ANY BUTTON  "
		   PRINT AT SCREENPOS(0,9) COLOR CS_WHITE,"      TO START     "
GOTO GAME_OVER_LOOP

WAITABIT: PROCEDURE

	FOR CNT=0 TO Y
		WAIT
		IF SHOW_ROCKS = 1 THEN GOSUB CHECK_COLLISION
		IF MISSILE <> 0 THEN GOSUB MOVE_MISSILE
	NEXT CNT

	END

REM -------------------------------------------------------------------------
REM THRUSTER - ADJUST THE SPEED BASED ON DIRECTION
REM -------------------------------------------------------------------------

THRUSTER: PROCEDURE
	CHECK=CHECK+1:IF CHECK>5 THEN CHECK=0
	IF CONT=DISC_N OR CONT=DISC_NNW OR CONT=DISC_NW OR CONT=DISC_WNW OR CONT=DISC_NNE OR CONT=DISC_NE OR CONT=DISC_ENE THEN 
		#FLAME=24
		IF DIRECTION=7 OR DIRECTION<2 THEN 
			#YMOVE=#YMOVE-1
			IF #YMOVE<-5 THEN #YMOVE=-5
		ELSEIF DIRECTION >2 AND DIRECTION < 6 THEN
			#YMOVE=#YMOVE+1
			IF #YMOVE>5 THEN #YMOVE=5
		ELSEIF CHECK=5 THEN
			IF #YMOVE > 0 THEN 
				#YMOVE = #YMOVE -.01
				IF #YMOVE < 0 THEN #YMOVE=0
			ELSEIF #YMOVE < 0 THEN
				#YMOVE = #YMOVE +.01
				IF #YMOVE > 0 THEN #YMOVE=0
			END IF
		END IF
	
		IF DIRECTION>0 AND DIRECTION<4 THEN 
			#XMOVE=#XMOVE+1
			IF #XMOVE>5 THEN #XMOVE=5
		ELSEIF DIRECTION >4 THEN
			#XMOVE=#XMOVE-1
			IF #XMOVE<-5 THEN #XMOVE=-5
		ELSEIF CHECK=5 THEN
		
			IF #XMOVE > 0 THEN 
				#XMOVE = #XMOVE -.1
				IF #XMOVE < 0 THEN #XMOVE=0
			ELSEIF #XMOVE < 0 THEN
				#XMOVE = #XMOVE +.1
				IF #XMOVE > 0 THEN #XMOVE=0
			END IF
		END IF
	ELSEIF CHECK=5 THEN
		#FLAME=0
		IF #YMOVE > 0 THEN 
			#YMOVE = #YMOVE -.01
			IF #YMOVE < 0 THEN #YMOVE=0
		ELSEIF #YMOVE < 0 THEN
			#YMOVE = #YMOVE +.01
			IF #YMOVE > 0 THEN #YMOVE=0
		END IF
		IF #XMOVE > 0 THEN 
				#XMOVE = #XMOVE -.01
				IF #XMOVE < 0 THEN #XMOVE=0
		ELSEIF #XMOVE < 0 THEN
				#XMOVE = #XMOVE +.01
				IF #XMOVE > 0 THEN #XMOVE=0
		END IF
	END IF
END

REM -------------------------------------------------------------------------
REM THRUSTER - END
REM -------------------------------------------------------------------------

MOVE_SHIP:PROCEDURE
	TRACK = TRACK + 1
	IF TRACK = 4 THEN TRACK = 0
   
	#SPRITEX(0)=#SPRITEX(0)+#XMOVE
	IF #SPRITEX(0)>#MAX_PLAYER_X THEN #SPRITEX(0)=#MIN_PLAYER_X
	IF #SPRITEX(0)<#MIN_PLAYER_X THEN #SPRITEX(0)=#MAX_PLAYER_X
	
	#SPRITEY(0)=#SPRITEY(0)+#YMOVE
	IF #SPRITEY(0)>#MAX_PLAYER_Y THEN #SPRITEY(0)=#MIN_PLAYER_Y
	IF #SPRITEY(0)<#MIN_PLAYER_Y THEN #SPRITEY(0)=#MAX_PLAYER_Y
	
	IF CONT.BUTTON <> 0 THEN 
		'IF SHOW_ROCKS = 0 THEN
		'	LEVEL = LEVEL + 1
		'	GOSUB RANDOM_ROCKS
		'	SHOW_ROCKS = 1
		'END IF
		GOSUB FIRE_MISSILE
	END IF		
END	

REM -------------------------------------------------------------------------
REM MOVE_SHIP - ADJUST THE SPEED BASED ON DIRECTION
REM -------------------------------------------------------------------------

REM -------------------------------------------------------------------------
REM MOVE_ROCK - MOVE ROCK AROUND THE SCREEN
REM -------------------------------------------------------------------------
MOVE_ROCK:PROCEDURE

	#SPRITEX(A)=#SPRITEX(A)+#XMOVE(A)
	IF #SPRITEX(A)>#MAX_PLAYER_X THEN #SPRITEX(A)=#MIN_PLAYER_X
	IF #SPRITEX(A)<#MIN_PLAYER_X THEN #SPRITEX(A)=#MAX_PLAYER_X
	
	#SPRITEY(A)=#SPRITEY(A)+#YMOVE(A)
	IF #SPRITEY(A)>#MAX_PLAYER_Y THEN #SPRITEY(A)=#MIN_PLAYER_Y
	IF #SPRITEY(A)<#MIN_PLAYER_Y THEN #SPRITEY(A)=#MAX_PLAYER_Y
END	
REM -------------------------------------------------------------------------
REM MOVE_ROCK - END
REM -------------------------------------------------------------------------

REM -------------------------------------------------------------------------
REM RANDOM_ROCKS - JUST FOR SHOW
REM -------------------------------------------------------------------------
RANDOM_ROCKS:PROCEDURE
IF SHOW_ROCKS = 0 THEN

	FOR A=1 TO LEVEL
		IF A > 6 THEN EXIT FOR
		#SPRITEX(A) = ROCKSTARTX(RANDOM(2))
		#SPRITEY(A) = ROCKSTARTY(RANDOM(2))
		SHOW(A)=1
		ZOOMXA(A) = 1
		ZOOMYA(A) = 2
		FLIPXA(A) = RANDOM(2)
		FLIPYA(A) = RANDOM(2)
		ROCK#(A) = RANDOM(3)
		IF COLORS = 0 THEN
		   SPRITEC(A) = 7
		ELSE
		   SPRITEC(A) = RANDOM(7) + 1
		END IF
		B_LOOP1:
		WAIT
		B=RANDOM(6)
		B=B-3
		IF B=0 THEN GOTO B_LOOP1
		#XMOVE(A)=B
		B_LOOP2:
		WAIT
		B=RANDOM(6)
		B=B-3
		IF B=0 THEN GOTO B_LOOP2
		#YMOVE(A)=B
	NEXT
END IF
END
REM -------------------------------------------------------------------------
REM RANDOM_ROCKS - END
REM -------------------------------------------------------------------------

REM -------------------------------------------------------------------------
REM CHECK_COLLISION - CHECKS FOR THINGS COLLIDING
REM -------------------------------------------------------------------------
CHECK_COLLISION:PROCEDURE

	FOR A = 1 TO 6
		IF COL7 AND HIT_SPRITE(A) THEN
				SOUND 2,1,0
				SOUND 4,1,$38
			MISSILE = 0
			SPRITE 7,0,0,0
				'FOR B = 0 TO 10
					'WAIT
					'SOUND 2,B*16,15-d/16
					'SOUND 4,B/16+4,$18
					'SOUND 0,(B and 7)*32+32,15
					'SOUND 1,(B and 7)*36+32,15
					'SOUND 2,(B and 7)*40+32,15
				'NEXT
				'SOUND 0,1,0
				'SOUND 1,1,0

			
			IF ZOOMYA(A)= 2 THEN
				ZOOMYA(A) = 1
				HITS = HITS + 1
				IF COLORS = 1 THEN
					SPRITEC(A) = RANDOM(7) + 1
				END IF
				GOSUB SPLIT_ROCK
			ELSEIF ZOOMYA(A) = 1 AND ZOOMXA(A) = 1 THEN
				ZOOMXA(A) = 0
				ZOOMYA(A) = 0
				HITS = HITS + 1
				IF COLORS = 1 THEN
					SPRITEC(A) = RANDOM(7) + 1
				END IF				
				GOSUB SPLIT_ROCK
			ELSE
				SHOW(A)=0
				RESETSPRITE(A)
				HITS = HITS + 1
				ROCK_AVAIL = 1
			END IF
			PRINT AT SCREENPOS(17,0) COLOR CS_BLUE,<>HITS," "
		END IF
	NEXT
	IF SHOW(1)=0 AND SHOW(2)=0 AND SHOW(3)=0 AND SHOW(4)=0 AND SHOW(5)=0 AND SHOW(6)=0 THEN
	   SHOW_ROCKS = 0
	END IF
	
END
REM -------------------------------------------------------------------------
REM CHECK_COLLISION - CHECKS FOR THINGS COLLIDING
REM -------------------------------------------------------------------------

REM -------------------------------------------------------------------------
REM SPLIT_ROCK - TRY AND FIND SPACE IN THE ARRAY
REM -------------------------------------------------------------------------
SPLIT_ROCK:PROCEDURE

IF ROCK_AVAIL = 1 THEN
	FOR B = 1 TO 6
		IF B <> A THEN
			IF SHOW(B) = 0 THEN
				SHOW(B) = SHOW(A)
				ZOOMYA(B) = ZOOMYA(B)
				ZOOMXA(B) = ZOOMXA(A)
				FLIPXA(A) = RANDOM(2)
				FLIPYA(A) = RANDOM(2)
				ROCK#(A) = RANDOM(3)
				FLIPXA(B) = RANDOM(2)
				FLIPYA(B) = RANDOM(2)
				ROCK#(B) = RANDOM(3)
				C_LOOP1:
				C=RANDOM(6)
				C=C-3
				IF C=0 THEN GOTO C_LOOP1
				#XMOVE(A)=C
				C_LOOP2:
				C=RANDOM(6)
				C=C-3
				IF C=0 THEN GOTO C_LOOP2
				#YMOVE(A) = C		
				#XMOVE(B) = #XMOVE(A) * -1
				#YMOVE(B) = #YMOVE(A) * -1
				#SPRITEX(B) = #SPRITEX(A)
				#SPRITEY(B) = #SPRITEY(A)
				IF COLORS = 0 THEN
					SPRITEC(B) = 7
				ELSE
				'NO_DARKGREEN:
					SPRITEC(B) = RANDOM(7) + 1
				'IF SPRITEC(B) = 0 OR SPRITEC(B) = 4 THEN GOTO NO_DARKGREEN
				END IF
			
				EXIT FOR
			END IF
		END IF
	NEXT

	ROCK_AVAIL = 0
	FOR B = 1 TO 6
		IF SHOW(B) = 0 THEN
			ROCK_AVAIL = 1
		END IF
	NEXT
END IF
END

REM -------------------------------------------------------------------------
REM ROCK_AVAIL - END
REM -------------------------------------------------------------------------
REM -------------------------------------------------------------------------
REM FIRE_MISSILE - START
REM -------------------------------------------------------------------------
FIRE_MISSILE:PROCEDURE	
	MISSILE = 1
	'SOUND 0,200-BY*10,15
				'FOR B = 0 TO 10
					'WAIT
					SOUND 2,MISSILE*16,15-d/16
					SOUND 4,MISSILE/16+4,$18
					'SOUND 0,(B and 7)*32+32,15
					'SOUND 1,(B and 7)*36+32,15
					'SOUND 2,(B and 7)*40+32,15
				'NEXT
				'SOUND 2,1,0
				'SOUND 4,1,$38
				
	#SPRITEX(7) = #SPRITEX(0)
	#SPRITEY(7) = #SPRITEY(0)
	#MISSILEX = MIS_DIRECTX(DIRECTION)
	#MISSILEY = MIS_DIRECTY(DIRECTION)
END
REM -------------------------------------------------------------------------
REM FIRE_MISSILE - END
REM -------------------------------------------------------------------------
REM -------------------------------------------------------------------------
REM MOVE_MISSILE - START
REM -------------------------------------------------------------------------
	MOVE_MISSILE:PROCEDURE
		#SPRITEX(7) = #SPRITEX(7) + #MISSILEX
		IF #SPRITEX(7)>#MAX_PLAYER_X THEN #SPRITEX(7)=#MIN_PLAYER_X
		IF #SPRITEX(7)<#MIN_PLAYER_X THEN #SPRITEX(7)=#MAX_PLAYER_X
		#SPRITEY(7) = #SPRITEY(7) + #MISSILEY
		IF #SPRITEY(7)>#MAX_PLAYER_Y THEN #SPRITEY(7)=#MIN_PLAYER_Y
		IF #SPRITEY(7)<#MIN_PLAYER_Y THEN #SPRITEY(7)=#MAX_PLAYER_Y
		MISSILE = MISSILE + 1
		IF MISSILE <= 8 THEN
			SOUND 2,MISSILE*16,15-d/16
			SOUND 4,MISSILE/16+4,$18
		ELSE
			SOUND 2,1,0
			SOUND 4,1,$38
		END IF
		IF MISSILE > 35 THEN
			MISSILE = 0
			SPRITE 7,0,0,0
		END IF
	END
REM -------------------------------------------------------------------------
REM MOVE_MISSILE - END
REM -------------------------------------------------------------------------
REM -------------------------------------------------------------------------
REM TITLE_SCREEN PROCEDURE - GETS NMBER OF PLAYERS AND WIND/NO WIND
REM -------------------------------------------------------------------------
TITLE_SCREEN:PROCEDURE

MODE SCREEN_COLOR_STACK, STACK_BLACK, STACK_BLACK, STACK_BROWN, STACK_BLACK
WAIT
BORDER BORDER_BLACK
WAIT
CLS

 GOSUB WAITABIT
    
	PRINT AT SCREENPOS(5,0) COLOR CS_BLUE, "PLANETOID     "
CHOICE = 0

	PRINT AT SCREENPOS(3,10) COLOR CS_WHITE, "ENTER TO START"

DO UNTIL (CONT.BUTTON + CONT.LEFT + CONT.RIGHT + CONT.UP + CONT.DOWN)=0 
WAIT 
LOOP 

NEW_LOOP2:
 WAIT 
IF CONT = CONT.BUTTON THEN
		BORDER BORDER_BLACK
		WAIT
		CLS
		GAME_ON = 1
		RETURN
	END IF
IF CONT.UP <> 0 AND CHOICE = 1 THEN
	CHOICE = 0
END IF

IF CONT.DOWN <> 0 AND CHOICE = 0 THEN
	CHOICE = 1
END IF

IF CHOICE = 0 THEN
	IF CONT.LEFT  <> 0 AND VECTOR = 1 THEN
			VECTOR = 0
	END IF
	IF CONT.RIGHT  <> 0 AND VECTOR = 0 THEN
			VECTOR = 1
	END IF
ELSE
	IF CONT.LEFT  <> 0 AND COLORS = 1 THEN
			COLORS = 0
	END IF
	IF CONT.RIGHT  <> 0 AND COLORS = 0 THEN
			COLORS = 1
	END IF
END IF
	
	IF CHOICE = 0 THEN
		PRINT AT SCREENPOS(3,4) COLOR CS_BLUE, "FILLED"
		PRINT AT SCREENPOS(10,4) COLOR CS_YELLOW, ">"
		PRINT AT SCREENPOS(16,4) COLOR CS_YELLOW, "<"
		
		IF VECTOR = 0 THEN
			PRINT AT SCREENPOS(12,4) COLOR CS_RED,"NO "
		ELSE
			PRINT AT SCREENPOS(12,4) COLOR CS_RED,"YES"
		END IF

			PRINT AT SCREENPOS(3,6) COLOR CS_DARKGREEN, "COLOR  "
			PRINT AT SCREENPOS(10,6) COLOR CS_DARKGREEN, " "
			PRINT AT SCREENPOS(16,6) COLOR CS_DARKGREEN, " "
			
		IF COLORS = 0 THEN
			PRINT AT SCREENPOS(11,6) COLOR CS_DARKGREEN,"WHITE"
		ELSE
			PRINT AT SCREENPOS(11,6) COLOR CS_DARKGREEN,"MULTI"
		END IF
		
	ELSE		
			PRINT AT SCREENPOS(3,4) COLOR CS_DARKGREEN, "FILLED   "
			PRINT AT SCREENPOS(16,4) COLOR CS_DARKGREEN, " "
			
		IF VECTOR = 0 THEN
			PRINT AT SCREENPOS(12,4) COLOR CS_DARKGREEN,"NO "
		ELSE
			PRINT AT SCREENPOS(12,4) COLOR CS_DARKGREEN,"YES"
		END IF
		
			PRINT AT SCREENPOS(3,6) COLOR CS_BLUE, "COLOR  "
			PRINT AT SCREENPOS(10,6) COLOR CS_YELLOW, ">"
			PRINT AT SCREENPOS(16,6) COLOR CS_YELLOW, "<"
			
		IF COLORS = 0 THEN
			PRINT AT SCREENPOS(11,6) COLOR CS_WHITE,"WHITE"
		ELSE
			PRINT AT SCREENPOS(11,6) COLOR CS_RED,"M"
			PRINT AT SCREENPOS(12,6) COLOR CS_TAN,"U"
			PRINT AT SCREENPOS(13,6) COLOR CS_YELLOW,"L"
			PRINT AT SCREENPOS(14,6) COLOR CS_GREEN,"T"
			PRINT AT SCREENPOS(15,6) COLOR CS_BLUE,"I"

		END IF
	END IF 

 
 GOTO NEW_LOOP2
END
REM -------------------------------------------------------------------------
REM END TITLE_SCREEN PROCEDURE
REM -------------------------------------------------------------------------
REM -------------------------------------------------------------------------
REM COUNT_DOWN PROCEDURE TO PLAY BY TIMER
REM -------------------------------------------------------------------------
COUNT_DOWN: PROCEDURE
	COUNT_FRAME = COUNT_FRAME + 1
END
REM -------------------------------------------------------------------------
REM END COUNT_DOWN PROCEDURE 
REM -------------------------------------------------------------------------

HIT_SPRITE:
    DATA $0001,$0002,$0004,$0008,$0010,$0020,$0040
MIS_DIRECTX:
	DATA 0,1,2,1,0,-1,-2,-1
MIS_DIRECTY:
	DATA -2,-1,0,1,2,1,0,-1
ZOOMX:
	DATA $0000,$0400
ZOOMY:
	DATA $0000,$0100,$0200,$0300
ROCKSTARTX:
	DATA 0,160
ROCKSTARTY:
	DATA 0,90
SCOLOR:
	DATA $0000,$0004,$0003,$0001,$0002,$0006,$0005,$0007,$0007
	  
SHIP_IMAGE:
	BITMAP "...X...."
	BITMAP "...X...."
	BITMAP "..X.X..."
	BITMAP "..X.X..."
	BITMAP ".X...X.."
	BITMAP ".X...X.."
	BITMAP "..XXX..."
	BITMAP "........"
	
	BITMAP "........"
	BITMAP ".....XX."
	BITMAP "..XXX.X."
	BITMAP ".X...X.."
	BITMAP ".X...X.."
	BITMAP "..X..X.."
	BITMAP "...XX..."
	BITMAP "........"
	
	BITMAP "........"
	BITMAP "..XX...."
	BITMAP ".X..XX.."
	BITMAP ".X....XX"
	BITMAP ".X..XX.."
	BITMAP "..XX...."
	BITMAP "........"
	BITMAP "........"
	
	BITMAP "...X...."
	BITMAP "...X...."
	BITMAP "..X.X..."
	BITMAP "..X.X..."
	BITMAP ".X...X.."
	BITMAP ".X...X.."
	BITMAP "..XXX..."
	BITMAP "...X...."
		
	BITMAP "........"
	BITMAP ".....XX."
	BITMAP "..XXX.X."
	BITMAP ".X...X.."
	BITMAP ".X...X.."
	BITMAP "..X..X.."
	BITMAP ".X.XX..."
	BITMAP "........"
	
	BITMAP "........"
	BITMAP "..XX...."
	BITMAP ".X..XX.."
	BITMAP "XX....XX"
	BITMAP ".X..XX.."
	BITMAP "..XX...."
	BITMAP "........"
	BITMAP "........"
	
	BITMAP "........"
	BITMAP "...###.."
	BITMAP "..#...#."
	BITMAP "##....#."
	BITMAP "#....#.."
	BITMAP "#.....#."
	BITMAP ".#..#..#"
	BITMAP "..##.##."
	
	BITMAP "........"
	BITMAP "..#..##."
	BITMAP ".##.#.#."
	BITMAP "#..#...#"
	BITMAP "#.....#."
	BITMAP "#......#"
	BITMAP "##....#."
	BITMAP "..####.."

    BITMAP "..#..##."
	BITMAP ".#.##..#"
	BITMAP "#.....#."
	BITMAP ".#....#."
	BITMAP ".#.....#"
	BITMAP "#......#"
	BITMAP ".#.##.#."
	BITMAP "..#..#.."
	
	BITMAP "........"
	BITMAP "...###.."
	BITMAP "..#####."
	BITMAP "#######."
	BITMAP "######.."
	BITMAP "#######."
	BITMAP ".#######"
	BITMAP "..##.##."
	
	BITMAP "........"
	BITMAP "..#..##."
	BITMAP ".##.###."
	BITMAP "########"
	BITMAP "#######."
	BITMAP "########"
	BITMAP "#######."
	BITMAP "..####.."

    BITMAP "..#..##."
	BITMAP ".#######"
	BITMAP "#######."
	BITMAP ".######."
	BITMAP ".#######"
	BITMAP "########"
	BITMAP ".######."
	BITMAP "..#..#.."

    BITMAP "........"
	BITMAP "........"
	BITMAP "...##..."
	BITMAP "...##..."
	BITMAP "..####.."
	BITMAP "...##..."
	BITMAP "...##..."
	BITMAP "........"
